<?php
declare(strict_types=1);

define('WOLVES_QTY', 10);
define('MAX_CELLS_QTY', 45);
define('PLAYGROUND_WIDTH', 9);
define('WOLF', '*');
?>

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"/>
    <meta http-equiv="X-UA-Compatible" content="ie=edge"/>
    <title>RedHat & Wolf</title>
    <link rel="preconnect" href="https://fonts.googleapis.com"/>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Ole&display=swap"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css"/>
    <script type="text/javascript"
            src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"
            async
            defer
    ></script>
    <style type="text/css">
        @keyframes horizontal_rotate {
            from {
                transform: rotateY(0deg);
            }
            to {
                transform: rotateY(360deg);
            }
        }
        @keyframes horizontal_fast_rotate {
            0% {
                transform: rotateY(0deg);
            }
            96% {
                transform: rotateY(0deg);
            }
            100% {
                transform: rotateY(360deg);
            }
        }
        @keyframes axis_rotation {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }
        }
        @keyframes flicker {
            0% {
                -webkit-box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
                -moz-box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
                box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
            }
            50% {
                -webkit-box-shadow: 0 0 35px 4px rgba(9, 143, 82, 1);
                -moz-box-shadow: 0 0 35px 4px rgba(9, 143, 82, 1);
                box-shadow: 0 0 35px 4px rgba(9, 143, 82, 1);
            }
            100% {
                -webkit-box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
                -moz-box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
                box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
            }
        }
        @keyframes redhat_movement {
            0% {
                background: url('./images/icons/redhat_icon.png') no-repeat;
            }
            24% {
                top: -37px;
                left: 863px;
                transform: rotateZ(0);
            }
            25% {
                top: -12px;
                left: 887px;
                transform: rotateZ(90deg);
            }
            49% {
                top: 482px;
                left: 887px;
                transform: rotateZ(90deg);
            }
            50% {
                top: 505px;
                left: 861px;
                transform: rotateZ(180deg);
            }
            74% {
                top: 505px;
                left: -11px;
                transform: rotateZ(180deg);
            }
            75% {
                top: 481px;
                left: -36px;
                transform: rotateZ(270deg);
            }
            98% {
                top: -10px;
                left: -36px;
                transform: rotateZ(270deg);
            }
            99% {
                top: -37px;
                left: -12px;
                transform: rotateZ(0);
            }
            100% {
                background: url('./images/icons/redhat_icon.png') no-repeat;
            }
        }
        :root {
            --main-scheme__color: #ffd559;
            --playground-background__color: #098f5273;
            --playground__width: 900px;
            --color__black: #000000;
        }

        html,
        body {
            max-height: 100vh;
            height: 100%;
            cursor: url('./images/icons/cursor/cursor_hand.png'), pointer;
        }
        .background {
            width: 100%;
            height: 100%;
            background: url('./images/main_background.png') no-repeat center center fixed;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: 100%;
            padding: 50px 0;
        }
        .content {
            margin: 0 auto;
            max-width: 1600px;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        .fairy-font {
            font-family: 'Ole', cursive;
        }
        .header {
            font-size: 122px;
            font-weight: 600;
            color: var(--main-scheme__color);
            letter-spacing: 22px;
            margin: 0 auto 40px;
        }
        .main-frame {
            width: 100%;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        .info-frame {
            max-width: 250px;
            margin: 0 20px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
        }
        .mouse-button-img {
            margin-bottom: 20px;
            filter: invert(90%) sepia(52%) saturate(1112%) hue-rotate(314deg) brightness(104%) contrast(106%);
        }
        .clu-container {
            color: var(--main-scheme__color);
            text-align: center;
            font-size: 22px;
            font-weight: 600;
        }
        .game-frame {
            margin: 0 auto;
            max-width: var(--playground__width);
            min-height: 520px;
            width: 100%;
            height: 100%;
        }
        .flicker {
            width: 100%;
            height: 100%;
            border-radius: 12px;
            animation: .5s 2s alternate linear 3 flicker;
            -webkit-box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
            -moz-box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
            box-shadow: 0 0 28px -3px rgba(9, 143, 82, 1);
            position: relative;
        }
        .flicker:before {
            content: '';
            display: inline-block;
            width: 50px;
            height: 50px;
            position: absolute;
            z-index: 1;
            top: -37px;
            left: -12px;
            animation: 30s 3.7s linear infinite redhat_movement;
        }
        .playground {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-evenly;
            border-radius: 12px;
            background: var(--playground-background__color);
        }
        .playground:hover {
            cursor: url('./images/icons/cursor/cursor_compass.png'), pointer;
        }
        .row {
            display: flex;
            justify-content: space-evenly;
        }
        .cell {
            width: 70px;
            height: 70px;
            padding: 5px;
            box-sizing: border-box;
            border: 1px solid var(--main-scheme__color);
            border-radius: 4px;
        }
        .cell:hover,
        .cell:active {
            -webkit-box-shadow: 0 0 10px 5px rgba(255, 213, 89, 0.2);
            -moz-box-shadow: 0 0 10px 5px rgba(255, 213, 89, 0.2);
            box-shadow: 0 0 10px 5px rgba(255, 213, 89, 0.2);
            transition: 0.2s box-shadow linear;
        }
        .non-action-element-hierarchy * {
            pointer-events: none; /* Disallowing to trigger event on this class and all children */
        }
        .value-position {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .icon-placeholder {
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            width: 100%;
            height: 100%;
        }
        .icon-tree {
            background: url('./images/icons/tree-icon.png') no-repeat center/100%;
        }
        .cell:hover .icon-tree,
        .cell:active .icon-tree {
            animation: 2s linear infinite horizontal_rotate;
        }
        .icon-wolf {
            background: url('./images/icons/wolf-icon.png') no-repeat center/100%;
            animation: 7s linear infinite axis_rotation;
        }
        .cell:hover .icon-wolf,
        .cell:active .icon-wolf {
            animation-play-state: paused;
        }
        .value {
            font-size: 68px;
            color: var(--main-scheme__color);
        }
        .value:not(.hidden) {
            animation: 30s 10s linear infinite horizontal_fast_rotate;
        }
        .hidden {
            visibility: hidden;
        }
        .game-goal {
            margin: 40px auto 0;
            box-sizing: border-box;
            color: #ffffff;
            max-width: var(--playground__width);
            width: 100%;
        }
        .game-goal > h4 {
            font-size: 36px;
        }
        .swal-modal {
            background: url('./images/modal_background.png') no-repeat center center fixed;
            min-width: 900px;
            min-height: 900px;
        }
        .swal-text,
        .swal-text:first-child {
            margin: 400px 0 0 140px;
            width: 100%;
        }
        .swal-text,
        .swal-text:first-child,
        .swal-footer {
            max-width: 700px;
        }
        .swal-footer .swal-button {
            border: none;
            text-decoration: underline;
            cursor: url('./images/icons/cursor/cursor_hand.png'), pointer;
        }
        .swal-footer .swal-button,
        .swal-button:not([disabled]):hover {
            background-color: transparent;
        }
        .swal-text,
        .swal-text:first-child,
        .swal-footer .swal-button {
            font-family: 'Ole', cursive;
            letter-spacing: 5px;
            font-size: 36px;
            font-weight: 700;
            color: var(--color__black);
            transform: rotateZ(2deg);
        }
    </style>
</head>
<body>
<div class="background">
    <div class="content">
        <div class="header fairy-font"><h2 class="game-title">RedHat & Wolf</h2></div>
        <div class="main-frame">
            <div class="info-frame">
                <img src="./images/mouse_left_button.png"
                     alt="mouse-button-img"
                     class="mouse-button-img"/>
                <div class="clu-container"><span class="clue">Open Cell</span></div>
            </div>
            <div class="game-frame">
                <div class="flicker">
                    <div class="playground">
                        <?php $playground = generatePlayground(); ?>
                        <?php foreach ($playground as $cellPosition => $cellValue): ?>
                            <?php if($cellPosition % PLAYGROUND_WIDTH === 0): ?>
                                <div class="row">
                            <?php endif; ?>
                            <div id="cell-<?= $cellPosition; ?>" class="non-action-element-hierarchy cell">
                                <div class="value-position icon-placeholder icon-tree"
                                    <?= $cellValue === '*' ? 'data-is-wolf="true"' : ''; ?>
                                >
                                    <span class="value fairy-font hidden"><?= $cellValue; ?></span>
                                </div>
                            </div>
                            <?php if(($cellPosition + 1) % PLAYGROUND_WIDTH === 0): ?>
                                </div>
                            <?php endif; ?>
                        <?php endforeach; ?>
                    </div>
                </div>
            </div>
            <div class="info-frame">
                <img src="./images/mouse_right_button.png"
                     alt="mouse-button-img"
                     class="mouse-button-img"/>
                <div class="clu-container"><span class="clue">Mark Cell as Wolf</span></div>
            </div>
        </div>
        <div class="game-goal">
            <h4>Game Goal: Mark all wolves, using tips from opened cells. Each tree clicking informs you how many wolves are hidden one cell around.</h4>
        </div>
    </div>
</div>

<script type="text/javascript">
    let isActPlayed = false,
        isGameLose = false;

    /**
     * The method calls an scenario act on the cell
     * @param {Array} act
     * @param {HTMLElement} mainActor
     * @return {void}
     */
    const playActFromScenario = function (act, mainActor) {
        act[1](mainActor);
    };

    const scenario = {
        /**
         * The method handling case, when the wolf is hidden under the cell
         * @param {HTMLElement} element
         * @return {void}
         */
        searchWolfAroundTree: function (element) {
            if (element.innerHTML !== '*') {
                return;
            }

            isActPlayed = true;

            informAboutGameState('The Game was finished. Unfortunately, you lose. Do you want to try again?');

            document.querySelectorAll('div[data-is-wolf]').forEach(
                element => element.classList.remove('icon-tree', 'icon-wolf') & element.classList.add('icon-wolf')
            );

            isGameLose = true;
        },
        /**
         * Show qty of wolves around the cell
         * @param {HTMLElement} element
         * @return {void}
         */
        keepOnesEarsOpen: function (element) {
            element.parentElement.classList.remove('icon-tree', 'icon-wolf');
            element.classList.remove('hidden');
        },
        /**
         * The method handling case, when the player marked all wolves correctly
         * @param {HTMLElement} element
         * @return {void}
         */
        checkMarkedWolves: function (element) {
            if (isGameLose) {
                return;
            }

            if (document.querySelectorAll('div.icon-wolf[data-is-wolf]').length === <?= WOLVES_QTY; ?>) {
                informAboutGameState('The Game was finished. You won. Do you want to try again?');
            }
        },
    };

    /**
     * The method checks scenarios
     * @param {PointerEvent} event
     * @return {void}
     */
    function lookAround (event) {
        Object.entries(scenario).forEach(act => {
            if (isActPlayed) {
                return;
            }

            playActFromScenario(act, event.target.children[0].children[0]);
        });

        isActPlayed = false;
    }

    /**
     * The method marks/unmarks wolf pointer on a cell and may end the game if all wolves are marked correctly
     * @param {PointerEvent} event
     * @return {void}
     */
    function markWolf (event) {
        const element = event.target.children[0];

        if (!element.children[0].classList.contains('hidden')) {
            return; // If cell is opened - it could not be marked as wolf
        }

        if (element.classList.contains('icon-wolf')) {
            element.classList.remove('icon-wolf');
            element.classList.add('icon-tree');
        } else {
            handleMarkingWolf(element);
        }
    }

    /**
     * The method compares qty of wolves and used wolf markers.
     * In case, when markers limit is not exceed marks target cell as a wolf
     * @param {HTMLElement} element
     * @return {void}
     */
    function handleMarkingWolf (element) {
        if (document.querySelectorAll('.icon-wolf').length >= <?= WOLVES_QTY; ?>) {
            swal({text: 'Wolf marker limit exceeded'});
        } else {
            element.classList.remove('icon-tree');
            element.classList.add('icon-wolf');
            scenario.checkMarkedWolves(element.children[0]);
        }
    }

    /**
     * The method informs player about game state
     * @param {String} message
     */
    function informAboutGameState(message) {
        swal({
            text: message,
            buttons: {
                confirm: {
                    text: 'Yes',
                    closeModal: false,
                    className: 'reload-page-trigger'
                },
                cancel: {
                    text: 'Cancel',
                    value: false,
                    visible: true,
                    closeModal: true
                }
            }
        });
    }

    document.addEventListener(
        'click',
        event => event.target.classList.contains('reload-page-trigger')
            ? window.location.reload() // Handling case, when gamer want to play again
            : void(0)
    );

    document.querySelectorAll('.playground .cell').forEach(playGroundCell => {
        playGroundCell.addEventListener('click', lookAround);
        // 3th parameter = true for processing this event before "auxclick" event
        playGroundCell.addEventListener('contextmenu', event => event.preventDefault(), true);
        playGroundCell.addEventListener(
            'auxclick',
            event => event.button === 2 ? markWolf(event) : void(0),
            false
        );
    });
</script>
</body>
</html>

<?php
/**
 * Creating a fully prepared game board, with wolves and hints
 * @return array
 */
function generatePlayground(): array
{
    $gameField = [];
    $wolfsPositions = getWolfsPositions(WOLVES_QTY, MAX_CELLS_QTY);

    $currentCellIndex = 0;

    while ($currentCellIndex < MAX_CELLS_QTY) {
        $gameField[] = in_array($currentCellIndex, $wolfsPositions)
            ? WOLF
            : lookForWolfs($wolfsPositions, $currentCellIndex, PLAYGROUND_WIDTH);

        $currentCellIndex++;
    }

    return $gameField;
}

/**
 * Getting wolfs positions on game board
 * @param int $wolfsQty
 * @param int $cellsQty
 * @return array
 */
function getWolfsPositions(int $wolfsQty, int $cellsQty): array
{
    $wolfsLocations = [];

    for ($hiddenWolfs = 0; $hiddenWolfs < $wolfsQty; $hiddenWolfs++) {
        $wolfsLocations[] = getFreeCell($wolfsLocations, $cellsQty);
    }

    return $wolfsLocations;
}

/**
 * Generating pseudo-random non duplicate value
 * @param array $occupiedPlaces
 * @param int $topLimit
 * @return int
 */
function getFreeCell(array $occupiedPlaces, int $topLimit): int
{
    $assumedPosition = rand(0, ($topLimit-1));

    return in_array($assumedPosition, $occupiedPlaces) ? getFreeCell($occupiedPlaces, $topLimit) : $assumedPosition;
}

/**
 * Searching qty of wolves one cell around
 * @param array $wolfsPositions
 * @param int $currentPosition
 * @param int $playgroundWidth
 * @return int
 */
function lookForWolfs(array $wolfsPositions, int $currentPosition, int $playgroundWidth): int
{
    $coordinates = [
            'north' => $currentPosition - $playgroundWidth,
            'northeast' => $currentPosition - $playgroundWidth + 1,
            'east' => $currentPosition + 1,
            'southeast' => $currentPosition + $playgroundWidth + 1,
            'south' => $currentPosition + $playgroundWidth,
            'southwest' => $currentPosition + $playgroundWidth - 1,
            'west' => $currentPosition - 1,
            'northwest' => $currentPosition - $playgroundWidth - 1
    ];

    return count(array_intersect($wolfsPositions, array_values($coordinates)));
}